{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\4DEVS\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // Pour stocker le fichier sélectionné\n  const [data, setData] = useState([]); // Pour stocker les données du CSV\n\n  // Fonction pour gérer la sélection du fichier\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile); // Met à jour l'état avec le fichier sélectionné\n\n    // Lire le fichier avec FileReader\n    if (selectedFile) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const csvContent = reader.result; // Contenu du fichier CSV\n        const parsedData = parseCSV(csvContent);\n        setData(parsedData); // Mettre à jour l'état avec les données extraites\n      };\n      reader.readAsText(selectedFile); // Lire le fichier en tant que texte\n    }\n  };\n\n  // Fonction pour parser le CSV (basé sur la séparation des lignes et des colonnes)\n  const parseCSV = csvContent => {\n    const rows = csvContent.split(\"\\n\"); // Séparer par ligne\n    const headers = rows[0].split(\",\"); // Séparer les en-têtes par virgule\n    const data = rows.slice(1).map(row => {\n      const cells = row.split(\",\"); // Séparer les cellules par virgule\n      let rowData = {};\n      headers.forEach((header, index) => {\n        var _cells$index;\n        rowData[header.trim()] = (_cells$index = cells[index]) === null || _cells$index === void 0 ? void 0 : _cells$index.trim(); // Associer chaque valeur à l'en-tête\n      });\n      return rowData;\n    });\n    return data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Importer un fichier CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileChange,\n      className: \"border p-2 m-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), data.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-auto border-collapse border border-gray-400\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.keys(data[0]).map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-300 px-4 py-2\",\n            children: header\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.values(row).map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border border-gray-300 px-4 py-2\",\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 19\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"m6yks188gaHhvOQHOZwguTUW9tM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","file","setFile","data","setData","handleFileChange","e","selectedFile","target","files","reader","FileReader","onload","csvContent","result","parsedData","parseCSV","readAsText","rows","split","headers","slice","map","row","cells","rowData","forEach","header","index","_cells$index","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","length","Object","keys","rowIndex","values","cell","cellIndex","_c","$RefreshReg$"],"sources":["C:/code/4DEVS/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction App() {\r\n  const [file, setFile] = useState(null);  // Pour stocker le fichier sélectionné\r\n  const [data, setData] = useState([]);    // Pour stocker les données du CSV\r\n\r\n  // Fonction pour gérer la sélection du fichier\r\n  const handleFileChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    setFile(selectedFile);  // Met à jour l'état avec le fichier sélectionné\r\n\r\n    // Lire le fichier avec FileReader\r\n    if (selectedFile) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const csvContent = reader.result;  // Contenu du fichier CSV\r\n        const parsedData = parseCSV(csvContent);\r\n        setData(parsedData);  // Mettre à jour l'état avec les données extraites\r\n      };\r\n      reader.readAsText(selectedFile);  // Lire le fichier en tant que texte\r\n    }\r\n  };\r\n\r\n  // Fonction pour parser le CSV (basé sur la séparation des lignes et des colonnes)\r\n  const parseCSV = (csvContent) => {\r\n    const rows = csvContent.split(\"\\n\");  // Séparer par ligne\r\n    const headers = rows[0].split(\",\");  // Séparer les en-têtes par virgule\r\n    const data = rows.slice(1).map((row) => {\r\n      const cells = row.split(\",\");  // Séparer les cellules par virgule\r\n      let rowData = {};\r\n      headers.forEach((header, index) => {\r\n        rowData[header.trim()] = cells[index]?.trim(); // Associer chaque valeur à l'en-tête\r\n      });\r\n      return rowData;\r\n    });\r\n    return data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Importer un fichier CSV</h1>\r\n\r\n      {/* Bouton pour sélectionner le fichier CSV */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileChange}\r\n        className=\"border p-2 m-4\"\r\n      />\r\n\r\n      {/* Affichage du contenu du CSV sous forme de tableau */}\r\n      {data.length > 0 && (\r\n        <table className=\"table-auto border-collapse border border-gray-400\">\r\n          <thead>\r\n            <tr>\r\n              {Object.keys(data[0]).map((header, index) => (\r\n                <th key={index} className=\"border border-gray-300 px-4 py-2\">{header}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                {Object.values(row).map((cell, cellIndex) => (\r\n                  <td key={cellIndex} className=\"border border-gray-300 px-4 py-2\">{cell}</td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}