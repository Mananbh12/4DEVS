{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\4DEVS\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // Pour stocker le fichier sélectionné\n  const [data, setData] = useState([]); // Pour stocker les données du CSV\n\n  // Fonction pour gérer la sélection du fichier\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile); // Met à jour l'état avec le fichier sélectionné\n\n    // Lire le fichier avec PapaParse\n    if (selectedFile) {\n      Papa.parse(selectedFile, {\n        complete: result => {\n          console.log(\"Données CSV analysées :\", result.data);\n          const formattedData = result.data.map(row => {\n            var _row$Nom, _row$Prenom, _row$DateDeNaissanc;\n            return {\n              nom: (_row$Nom = row[\"Nom\"]) === null || _row$Nom === void 0 ? void 0 : _row$Nom.trim().replace(/\"/g, \"\"),\n              // Nettoyer les guillemets\n              prenom: (_row$Prenom = row[\"Prenom\"]) === null || _row$Prenom === void 0 ? void 0 : _row$Prenom.trim().replace(/\"/g, \"\"),\n              // Nettoyer les guillemets\n              dateDeNaissance: (_row$DateDeNaissanc = row[\"Date de naissance\"]) === null || _row$DateDeNaissanc === void 0 ? void 0 : _row$DateDeNaissanc.trim().replace(/\"/g, \"\") // Nettoyer les guillemets\n            };\n          });\n          setData(formattedData); // Mettre à jour l'état avec les données extraites\n\n          // Envoi des données au backend\n          sendDataToBackend(formattedData);\n        },\n        header: true,\n        // Utiliser la première ligne comme entête\n        skipEmptyLines: true // Ignorer les lignes vides\n      });\n    }\n  };\n\n  // Fonction pour envoyer les données au backend\n  const sendDataToBackend = async students => {\n    try {\n      // Convertir les dates et gérer les dates invalides\n      const studentsWithDate = students.map(student => {\n        let dateDeNaissance = student.dateDeNaissance;\n\n        // Vérifier si la date est valide\n        const parsedDate = Date.parse(dateDeNaissance);\n        if (!isNaN(parsedDate)) {\n          // Si la date est valide, la convertir en objet Date\n          dateDeNaissance = new Date(parsedDate);\n        } else {\n          // Si la date est invalide, définir null ou une date par défaut\n          dateDeNaissance = new Date();\n          ;\n        }\n        return {\n          ...student,\n          dateDeNaissance // Remplacer la date par la version convertie ou null\n        };\n      });\n      const response = await fetch(\"http://localhost:5000/api/students\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          students: studentsWithDate\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(\"Les élèves ont été enregistrés dans la base de données.\");\n      } else {\n        alert(\"Erreur lors de l'enregistrement des élèves :\", data.message);\n      }\n    } catch (error) {\n      console.error(\"Erreur d'envoi au serveur:\", error);\n      alert(\"Une erreur est survenue lors de l'enregistrement des élèves.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Importer un fichier CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileChange,\n      className: \"border p-2 m-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), data.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-auto border-collapse border border-gray-400\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.keys(data[0]).map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-300 px-4 py-2\",\n            children: header\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.values(row).map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border border-gray-300 px-4 py-2\",\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"m6yks188gaHhvOQHOZwguTUW9tM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Papa","jsxDEV","_jsxDEV","App","_s","file","setFile","data","setData","handleFileChange","e","selectedFile","target","files","parse","complete","result","console","log","formattedData","map","row","_row$Nom","_row$Prenom","_row$DateDeNaissanc","nom","trim","replace","prenom","dateDeNaissance","sendDataToBackend","header","skipEmptyLines","students","studentsWithDate","student","parsedDate","Date","isNaN","response","fetch","method","headers","body","JSON","stringify","json","ok","alert","message","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","length","Object","keys","index","rowIndex","values","cell","cellIndex","_c","$RefreshReg$"],"sources":["C:/code/4DEVS/client/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\n\r\nfunction App() {\r\n  const [file, setFile] = useState(null); // Pour stocker le fichier sélectionné\r\n  const [data, setData] = useState([]); // Pour stocker les données du CSV\r\n\r\n  // Fonction pour gérer la sélection du fichier\r\n  const handleFileChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    setFile(selectedFile); // Met à jour l'état avec le fichier sélectionné\r\n\r\n    // Lire le fichier avec PapaParse\r\n    if (selectedFile) {\r\n      Papa.parse(selectedFile, {\r\n        complete: (result) => {\r\n          console.log(\"Données CSV analysées :\", result.data);\r\n          const formattedData = result.data.map((row) => ({\r\n            nom: row[\"Nom\"]?.trim().replace(/\"/g, \"\"), // Nettoyer les guillemets\r\n            prenom: row[\"Prenom\"]?.trim().replace(/\"/g, \"\"), // Nettoyer les guillemets\r\n            dateDeNaissance: row[\"Date de naissance\"]?.trim().replace(/\"/g, \"\"), // Nettoyer les guillemets\r\n          }));\r\n          setData(formattedData); // Mettre à jour l'état avec les données extraites\r\n\r\n          // Envoi des données au backend\r\n          sendDataToBackend(formattedData);\r\n        },\r\n        header: true, // Utiliser la première ligne comme entête\r\n        skipEmptyLines: true, // Ignorer les lignes vides\r\n      });\r\n    }\r\n  };\r\n\r\n  // Fonction pour envoyer les données au backend\r\n  const sendDataToBackend = async (students) => {\r\n    try {\r\n      // Convertir les dates et gérer les dates invalides\r\n      const studentsWithDate = students.map((student) => {\r\n        let dateDeNaissance = student.dateDeNaissance;\r\n\r\n        // Vérifier si la date est valide\r\n        const parsedDate = Date.parse(dateDeNaissance);\r\n        if (!isNaN(parsedDate)) {\r\n          // Si la date est valide, la convertir en objet Date\r\n          dateDeNaissance = new Date(parsedDate);\r\n        } else {\r\n          // Si la date est invalide, définir null ou une date par défaut\r\n          dateDeNaissance = new Date();; \r\n        }\r\n\r\n        return {\r\n          ...student,\r\n          dateDeNaissance, // Remplacer la date par la version convertie ou null\r\n        };\r\n      });\r\n\r\n      const response = await fetch(\"http://localhost:5000/api/students\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ students: studentsWithDate }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        alert(\"Les élèves ont été enregistrés dans la base de données.\");\r\n      } else {\r\n        alert(\"Erreur lors de l'enregistrement des élèves :\", data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur d'envoi au serveur:\", error);\r\n      alert(\"Une erreur est survenue lors de l'enregistrement des élèves.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Importer un fichier CSV</h1>\r\n\r\n      {/* Bouton pour sélectionner le fichier CSV */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileChange}\r\n        className=\"border p-2 m-4\"\r\n      />\r\n\r\n      {/* Affichage du contenu du CSV sous forme de tableau */}\r\n      {data.length > 0 && (\r\n        <table className=\"table-auto border-collapse border border-gray-400\">\r\n          <thead>\r\n            <tr>\r\n              {Object.keys(data[0]).map((header, index) => (\r\n                <th key={index} className=\"border border-gray-300 px-4 py-2\">\r\n                  {header}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                {Object.values(row).map((cell, cellIndex) => (\r\n                  <td\r\n                    key={cellIndex}\r\n                    className=\"border border-gray-300 px-4 py-2\"\r\n                  >\r\n                    {cell}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}