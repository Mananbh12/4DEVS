{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\4DEVS\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { parse, isValid, format } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // Pour stocker le fichier sélectionné\n  const [data, setData] = useState([]); // Pour stocker les données du CSV\n\n  // Fonction pour gérer la sélection du fichier\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile); // Met à jour l'état avec le fichier sélectionné\n\n    // Lire le fichier avec PapaParse\n    if (selectedFile) {\n      Papa.parse(selectedFile, {\n        complete: result => {\n          console.log(\"Données CSV analysées :\", result.data);\n          const formattedData = result.data.map(row => {\n            var _row$Nom, _row$Prenom, _row$DateDeNaissanc;\n            return {\n              nom: (_row$Nom = row[\"Nom\"]) === null || _row$Nom === void 0 ? void 0 : _row$Nom.trim().replace(/\"/g, \"\"),\n              // Nettoyer les guillemets\n              prenom: (_row$Prenom = row[\"Prenom\"]) === null || _row$Prenom === void 0 ? void 0 : _row$Prenom.trim().replace(/\"/g, \"\"),\n              // Nettoyer les guillemets\n              dateDeNaissance: (_row$DateDeNaissanc = row[\"Date de naissance\"]) === null || _row$DateDeNaissanc === void 0 ? void 0 : _row$DateDeNaissanc.trim().replace(/\"/g, \"\") // Nettoyer les guillemets\n            };\n          });\n          setData(formattedData); // Mettre à jour l'état avec les données extraites\n\n          // Envoi des données au backend\n          sendDataToBackend(formattedData);\n        },\n        header: true,\n        // Utiliser la première ligne comme entête\n        skipEmptyLines: true // Ignorer les lignes vides\n      });\n    }\n  };\n  function removeAccents(str) {\n    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n\n  // Fonction pour envoyer les données au backend\n  const sendDataToBackend = async csvFile => {\n    try {\n      // Lire le fichier CSV avec papaparse\n      parse(csvFile, {\n        complete: result => {\n          const students = result.data;\n\n          // Nettoyer les en-têtes pour remplacer les accents\n          const cleanedHeaders = Object.keys(students[0]).map(header => removeAccents(header.trim().toLowerCase()));\n\n          // Nettoyer les données (prénom, nom, date de naissance, etc.) pour chaque ligne\n          const cleanedData = students.map(student => {\n            const cleanedStudent = {};\n\n            // Remplacer les accents dans les en-têtes et les associer aux données\n            Object.keys(student).forEach((key, index) => {\n              var _student$key;\n              const cleanedKey = cleanedHeaders[index]; // En-tête nettoyé\n              cleanedStudent[cleanedKey] = (_student$key = student[key]) === null || _student$key === void 0 ? void 0 : _student$key.trim(); // Remplacer les accents et trim\n            });\n\n            // Si la date de naissance est valide, la formater correctement\n            if (cleanedStudent['date de naissance']) {\n              const parsedDate = new Date(cleanedStudent['date de naissance']);\n              if (!isNaN(parsedDate)) {\n                cleanedStudent['date de naissance'] = parsedDate.toISOString(); // Format ISO\n              } else {\n                cleanedStudent['date de naissance'] = null; // Si la date est invalide, mettre null\n              }\n            }\n            return cleanedStudent;\n          });\n\n          // Vérifier qu'il y a des données valides avant d'envoyer\n          if (cleanedData.length === 0) {\n            alert(\"Aucun élève avec une date valide n'a été trouvé.\");\n            return;\n          }\n\n          // Envoyer les données nettoyées au serveur\n          fetch(\"http://localhost:5000/api/students\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              students: cleanedData\n            })\n          }).then(response => response.json()).then(data => {\n            if (data.success) {\n              alert(\"Les élèves ont été enregistrés.\");\n            } else {\n              alert(\"Erreur lors de l'enregistrement des élèves:\", data.message);\n            }\n          }).catch(error => {\n            console.error(\"Erreur d'envoi au serveur:\", error);\n            alert(\"Une erreur est survenue lors de l'enregistrement des élèves.\");\n          });\n        },\n        header: true // Indiquer que le fichier CSV a des en-têtes\n      });\n    } catch (error) {\n      console.error(\"Erreur de traitement du fichier CSV:\", error);\n      alert(\"Une erreur est survenue lors du traitement du fichier CSV.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Importer un fichier CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileChange,\n      className: \"border p-2 m-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), data.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-auto border-collapse border border-gray-400\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.keys(data[0]).map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-300 px-4 py-2\",\n            children: header\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.values(row).map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border border-gray-300 px-4 py-2\",\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 19\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"m6yks188gaHhvOQHOZwguTUW9tM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Papa","parse","isValid","format","jsxDEV","_jsxDEV","App","_s","file","setFile","data","setData","handleFileChange","e","selectedFile","target","files","complete","result","console","log","formattedData","map","row","_row$Nom","_row$Prenom","_row$DateDeNaissanc","nom","trim","replace","prenom","dateDeNaissance","sendDataToBackend","header","skipEmptyLines","removeAccents","str","normalize","csvFile","students","cleanedHeaders","Object","keys","toLowerCase","cleanedData","student","cleanedStudent","forEach","key","index","_student$key","cleanedKey","parsedDate","Date","isNaN","toISOString","length","alert","fetch","method","headers","body","JSON","stringify","then","response","json","success","message","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","rowIndex","values","cell","cellIndex","_c","$RefreshReg$"],"sources":["C:/code/4DEVS/client/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { parse, isValid, format } from \"date-fns\";\r\n\r\nfunction App() {\r\n  const [file, setFile] = useState(null); // Pour stocker le fichier sélectionné\r\n  const [data, setData] = useState([]); // Pour stocker les données du CSV\r\n\r\n  // Fonction pour gérer la sélection du fichier\r\n  const handleFileChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    setFile(selectedFile); // Met à jour l'état avec le fichier sélectionné\r\n\r\n    // Lire le fichier avec PapaParse\r\n    if (selectedFile) {\r\n      Papa.parse(selectedFile, {\r\n        complete: (result) => {\r\n          console.log(\"Données CSV analysées :\", result.data);\r\n          const formattedData = result.data.map((row) => ({\r\n            nom: row[\"Nom\"]?.trim().replace(/\"/g, \"\"), // Nettoyer les guillemets\r\n            prenom: row[\"Prenom\"]?.trim().replace(/\"/g, \"\"), // Nettoyer les guillemets\r\n            dateDeNaissance: row[\"Date de naissance\"]?.trim().replace(/\"/g, \"\"), // Nettoyer les guillemets\r\n          }));\r\n          setData(formattedData); // Mettre à jour l'état avec les données extraites\r\n\r\n          // Envoi des données au backend\r\n          sendDataToBackend(formattedData);\r\n        },\r\n        header: true, // Utiliser la première ligne comme entête\r\n        skipEmptyLines: true, // Ignorer les lignes vides\r\n      });\r\n    }\r\n  };\r\n\r\n  function removeAccents(str) {\r\n    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n  }\r\n\r\n  // Fonction pour envoyer les données au backend\r\n  const sendDataToBackend = async (csvFile) => {\r\n  try {\r\n    // Lire le fichier CSV avec papaparse\r\n    parse(csvFile, {\r\n      complete: (result) => {\r\n        const students = result.data;\r\n\r\n        // Nettoyer les en-têtes pour remplacer les accents\r\n        const cleanedHeaders = Object.keys(students[0]).map(header => removeAccents(header.trim().toLowerCase()));\r\n\r\n        // Nettoyer les données (prénom, nom, date de naissance, etc.) pour chaque ligne\r\n        const cleanedData = students.map((student) => {\r\n          const cleanedStudent = {};\r\n\r\n          // Remplacer les accents dans les en-têtes et les associer aux données\r\n          Object.keys(student).forEach((key, index) => {\r\n            const cleanedKey = cleanedHeaders[index]; // En-tête nettoyé\r\n            cleanedStudent[cleanedKey] = student[key]?.trim(); // Remplacer les accents et trim\r\n          });\r\n\r\n          // Si la date de naissance est valide, la formater correctement\r\n          if (cleanedStudent['date de naissance']) {\r\n            const parsedDate = new Date(cleanedStudent['date de naissance']);\r\n            if (!isNaN(parsedDate)) {\r\n              cleanedStudent['date de naissance'] = parsedDate.toISOString(); // Format ISO\r\n            } else {\r\n              cleanedStudent['date de naissance'] = null; // Si la date est invalide, mettre null\r\n            }\r\n          }\r\n\r\n          return cleanedStudent;\r\n        });\r\n\r\n        // Vérifier qu'il y a des données valides avant d'envoyer\r\n        if (cleanedData.length === 0) {\r\n          alert(\"Aucun élève avec une date valide n'a été trouvé.\");\r\n          return;\r\n        }\r\n\r\n        // Envoyer les données nettoyées au serveur\r\n        fetch(\"http://localhost:5000/api/students\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ students: cleanedData }),\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          if (data.success) {\r\n            alert(\"Les élèves ont été enregistrés.\");\r\n          } else {\r\n            alert(\"Erreur lors de l'enregistrement des élèves:\", data.message);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Erreur d'envoi au serveur:\", error);\r\n          alert(\"Une erreur est survenue lors de l'enregistrement des élèves.\");\r\n        });\r\n      },\r\n      header: true, // Indiquer que le fichier CSV a des en-têtes\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erreur de traitement du fichier CSV:\", error);\r\n    alert(\"Une erreur est survenue lors du traitement du fichier CSV.\");\r\n  }\r\n};\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Importer un fichier CSV</h1>\r\n\r\n      {/* Bouton pour sélectionner le fichier CSV */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileChange}\r\n        className=\"border p-2 m-4\"\r\n      />\r\n\r\n      {/* Affichage du contenu du CSV sous forme de tableau */}\r\n      {data.length > 0 && (\r\n        <table className=\"table-auto border-collapse border border-gray-400\">\r\n          <thead>\r\n            <tr>\r\n              {Object.keys(data[0]).map((header, index) => (\r\n                <th key={index} className=\"border border-gray-300 px-4 py-2\">\r\n                  {header}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                {Object.values(row).map((cell, cellIndex) => (\r\n                  <td\r\n                    key={cellIndex}\r\n                    className=\"border border-gray-300 px-4 py-2\"\r\n                  >\r\n                    {cell}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}